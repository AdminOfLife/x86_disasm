// order matters. ins with F_X32_ONLY and F_X64_ONLY should go first
    { 0x00, 0x00, F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "ADD", I_ADD },
    { 0x01, 0x00, F_X32_ONLY | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "ADD", I_ADD },
    { 0x01, 0x00, F_X64_ONLY | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "ADD", I_ADD },
    { 0x01, 0xD0, F_0F | F_OPC2, NULL, NULL, NULL, "XGETBV", I_XGETBV },
    { 0x02, 0x00, F_MODRM, c_OP_MODRM_R8, c_OP_MODRM_RM8, NULL, "ADD", I_ADD },
    { 0x03, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "ADD", I_ADD },
    { 0x03, 0x00, F_MODRM | F_0F | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "LSL", I_LSL },
    { 0x04, 0x00, F_IMM8, c_OP_AL, c_OP_IMM8, NULL, "ADD", I_ADD },
    { 0x05, 0x00, F_REXW_ABSENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_EAX, c_OP_IMM32, NULL, "ADD", I_ADD },
    { 0x05, 0x00, F_REXW_PRESENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_RAX, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, NULL, "ADD", I_ADD },
    { 0x06, 0x00, 0, c_OP_ES, NULL, NULL, "PUSH", I_PUSH },
    { 0x07, 0x00, 0, c_OP_ES, NULL, NULL, "POP", I_POP },
    { 0x08, 0x00, F_MODRM, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "OR", I_OR },
    { 0x09, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "OR", I_OR },
    { 0x0A, 0x00, F_MODRM, c_OP_MODRM_R8, c_OP_MODRM_RM8, NULL, "OR", I_OR },
    { 0x0B, 0x00, F_0F, NULL, NULL, NULL, "UD2", I_UD2 },
    { 0x0B, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "OR", I_OR },
    { 0x0C, 0x00, F_IMM8, c_OP_AL, c_OP_IMM8, NULL, "OR", I_OR },
    { 0x0D, 0x00, F_REXW_ABSENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_EAX, c_OP_IMM32, NULL, "OR", I_OR },
    { 0x0D, 0x00, F_REXW_PRESENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_RAX, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, NULL, "OR", I_OR },
    { 0x0E, 0x00, 0, c_OP_CS, NULL, NULL, "PUSH", I_PUSH },
    { 0x10, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MOVSD", I_SIMD_MOVSD }, // [!] второй операнд неверен, see manual
    { 0x10, 0x00, F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MOVUPS", I_MOVUPS },
    { 0x10, 0x00, F_F3 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MOVSS", I_MOVSS },
    { 0x10, 0x00, F_MODRM, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "ADC", I_ADC },
    { 0x11, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM_XMM, c_OP_MODRM_R_XMM, NULL, "MOVUPS", I_MOVUPS },
    { 0x11, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_RM_XMM, c_OP_MODRM_R_XMM, NULL, "MOVSD", I_SIMD_MOVSD }, // [!] второй операнд неверен, see manual
    { 0x11, 0x00, F_F3 | F_0F | F_MODRM, c_OP_MODRM_RM_XMM, c_OP_MODRM_R_XMM, NULL, "MOVSS", I_MOVSS }, // [!] второй операнд неверен, see manual
    { 0x11, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "ADC", I_ADC },
    { 0x12, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_MM, NULL, "MOVLPD", I_MOVLPD },
    { 0x12, 0x00, F_MODRM, c_OP_MODRM_R8, c_OP_MODRM_RM8, NULL, "ADC", I_ADC },
    { 0x12, 0x00, F_F3 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MOVSLDUP", I_MOVSLDUP },
    { 0x13, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_RM_MM, c_OP_MODRM_R_XMM, NULL, "MOVLPD", I_MOVLPD },
    { 0x13, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "ADC", I_ADC },
    { 0x14, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "UNPCKLPD", I_UNPCKLPD },
    { 0x14, 0x00, F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "UNPCKLPS", I_UNPCKLPS },
    { 0x14, 0x00, F_IMM8, c_OP_AL, c_OP_IMM8, NULL, "ADC", I_ADC },
    { 0x15, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "UNPCKHPD", I_UNPCKHPD },
    { 0x15, 0x00, F_REXW_ABSENT | F_IMM32, c_OP_EAX, c_OP_IMM32, NULL, "ADC", I_ADC },
    { 0x15, 0x00, F_REXW_PRESENT | F_IMM32, c_OP_RAX, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, NULL, "ADC", I_ADC },
    { 0x16, 0x00, 0, c_OP_SS, NULL, NULL, "PUSH", I_PUSH },
    { 0x17, 0x00, 0, c_OP_SS, NULL, NULL, "POP", I_POP },
    { 0x18, 0x00, F_0F | F_MODRM_REG_0 | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "PREFETCHNTA", I_PREFETCHNTA },
    { 0x18, 0x00, F_MODRM, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "SBB", I_SBB },
    { 0x19, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "SBB", I_SBB },
    { 0x1A, 0x00, F_MODRM, c_OP_MODRM_R8, c_OP_MODRM_RM8, NULL, "SBB", I_SBB },
    { 0x1B, 0x00, F_PREFIX66_ALLOWED | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "SBB", I_SBB },
    { 0x1C, 0x00, F_IMM8, c_OP_AL, c_OP_IMM8, NULL, "SBB", I_SBB },
    { 0x1D, 0x00, F_REXW_ABSENT | F_IMM32, c_OP_EAX, c_OP_IMM32, NULL, "SBB", I_SBB },
    { 0x1D, 0x00, F_REXW_PRESENT | F_IMM32, c_OP_RAX, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, NULL, "SBB", I_SBB },
    { 0x1E, 0x00, 0, c_OP_DS, NULL, NULL, "PUSH", I_PUSH },
    { 0x1F, 0x00, 0, c_OP_DS, NULL, NULL, "POP", I_POP },
    { 0x1F, 0x00, F_PREFIX66_ALLOWED | F_0F | F_MODRM_REG_0 | F_MODRM | F_X64_PROMOTE_OP1_32_TO_64, c_OP_MODRM_RM32, NULL, NULL, "NOP", I_NOP },
    { 0x20, 0x00, F_MODRM, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "AND", I_AND },
    { 0x21, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "AND", I_AND },
    { 0x22, 0x00, F_MODRM, c_OP_MODRM_R8, c_OP_MODRM_RM8, NULL, "AND", I_AND },
    { 0x23, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "AND", I_AND },
    { 0x24, 0x00, F_IMM8, c_OP_AL, c_OP_IMM8, NULL, "AND", I_AND },
    { 0x25, 0x00, F_REXW_ABSENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_EAX, c_OP_IMM32, NULL, "AND", I_AND },
    { 0x25, 0x00, F_REXW_PRESENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_RAX, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, NULL, "AND", I_AND },
    { 0x27, 0x00, 0, NULL, NULL, NULL, "DAA", I_DAA },
    { 0x28, 0x00, F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MOVAPS", I_MOVAPS },
    { 0x28, 0x00, F_0F | F_PREFIX66_IS_PART_OF_OPCODE | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MOVAPD", I_MOVAPD },
    { 0x28, 0x00, F_MODRM, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "SUB", I_SUB },
    { 0x29, 0x00, F_0F | F_PREFIX66_IS_PART_OF_OPCODE | F_MODRM, c_OP_MODRM_RM_XMM, c_OP_MODRM_R_XMM, NULL, "MOVAPD", I_MOVAPD },
    { 0x29, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM_XMM, c_OP_MODRM_R_XMM, NULL, "MOVAPS", I_MOVAPS },
    { 0x29, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "SUB", I_SUB },
    { 0x2A, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_F2 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM32, NULL, "CVTSI2SD", I_CVTSI2SD },
    { 0x2A, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_F3 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM32, NULL, "CVTSI2SS", I_CVTSI2SS },
    { 0x2A, 0x00, F_MODRM, c_OP_MODRM_R8, c_OP_MODRM_RM8, NULL, "SUB", I_SUB },
    { 0x2B, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "SUB", I_SUB },
    { 0x2C, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM_MM, NULL, "CVTTSD2SI", I_CVTTSD2SI }, // xmm/m64 ?
    { 0x2C, 0x00, F_IMM8, c_OP_AL, c_OP_IMM8, NULL, "SUB", I_SUB },
    { 0x2D, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM_MM, NULL, "CVTSD2SI", I_CVTSD2SI }, // [!] второй операнд неверен
    { 0x2D, 0x00, F_REXW_ABSENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_EAX, c_OP_IMM32, NULL, "SUB", I_SUB },
    { 0x2D, 0x00, F_REXW_PRESENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_RAX, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, NULL, "SUB", I_SUB },
    { 0x2E, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "UCOMISD", I_UCOMISD },
    { 0x2F, 0x00, 0, NULL, NULL, NULL, "DAS", I_DAS },
    { 0x2F, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "COMISD", I_COMISD },
    { 0x2F, 0x00, F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "COMISS", I_COMISS },
    { 0x30, 0x00, F_MODRM, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "XOR", I_XOR },
    { 0x31, 0x00, F_0F, NULL, NULL, NULL, "RDTSC", I_RDTSC },
    { 0x31, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "XOR", I_XOR },
    { 0x32, 0x00, F_MODRM, c_OP_MODRM_R8, c_OP_MODRM_RM8, NULL, "XOR", I_XOR },
    { 0x33, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "XOR", I_XOR },
    { 0x34, 0x00, F_0F, NULL, NULL, NULL, "SYSENTER", I_SYSENTER },
    { 0x34, 0x00, F_IMM8, c_OP_AL, c_OP_IMM8, NULL, "XOR", I_XOR },
    { 0x35, 0x00, F_REXW_ABSENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_EAX, c_OP_IMM32, NULL, "XOR", I_XOR },
    { 0x35, 0x00, F_REXW_PRESENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_RAX, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, NULL, "XOR", I_XOR },
    { 0x37, 0x00, 0, NULL, NULL, NULL, "AAA", I_AAA },
    { 0x38, 0x00, F_MODRM, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "CMP", I_CMP },
    { 0x38, 0xDB, F_0F | F_PREFIX66_IS_PART_OF_OPCODE | F_MODRM | F_OPC2, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "AESIMC", I_AESIMC },
    { 0x38, 0x39, F_0F | F_PREFIX66_IS_PART_OF_OPCODE | F_MODRM | F_OPC2, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PMINSD", I_PMINSD },
    { 0x38, 0x3D, F_0F | F_PREFIX66_IS_PART_OF_OPCODE | F_MODRM | F_OPC2, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PMAXSD", I_PMAXSD },
    { 0x38, 0xDC, F_0F | F_PREFIX66_IS_PART_OF_OPCODE | F_MODRM | F_OPC2, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "AESENC", I_AESENC },
    { 0x38, 0xDD, F_0F | F_PREFIX66_IS_PART_OF_OPCODE | F_MODRM | F_OPC2, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "AESENCLAST", I_AESENCLAST },
    { 0x39, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "CMP", I_CMP },
    { 0x3A, 0x00, F_MODRM, c_OP_MODRM_R8, c_OP_MODRM_RM8, NULL, "CMP", I_CMP },
    { 0x3A, 0xDF, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_OPC2 | F_MODRM | F_IMM8, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, c_OP_IMM8, "AESKEYGENASSIST", I_AESKEYGENASSIST },
    { 0x3B, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMP", I_CMP },
    { 0x3C, 0x00, F_IMM8, c_OP_AL, c_OP_IMM8, NULL, "CMP", I_CMP },
    { 0x3D, 0x00, F_REXW_ABSENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_EAX, c_OP_IMM32, NULL, "CMP", I_CMP },
    { 0x3D, 0x00, F_REXW_PRESENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_RAX, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, NULL, "CMP", I_CMP },
    { 0x3F, 0x00, 0, NULL, NULL, NULL, "AAS", I_AAS },
    { 0x40, 0x00, F_PREFIX66_ALLOWED | F_REG32_IS_LOWEST_PART_OF_1ST_BYTE, c_OP_REG32_FROM_LOWEST_PART_OF_1ST_BYTE, NULL, NULL, "INC", I_INC },
    { 0x40, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVO", I_CMOVO },
    { 0x42, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVB", I_CMOVB },
    { 0x43, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVNB", I_CMOVNB },
    { 0x44, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVZ",  I_CMOVZ },
    { 0x45, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVNZ", I_CMOVNZ },
    { 0x46, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVBE", I_CMOVBE },
    { 0x47, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVA", I_CMOVA },
    { 0x48, 0x00, 0 | F_PREFIX66_ALLOWED | F_REG32_IS_LOWEST_PART_OF_1ST_BYTE, c_OP_REG32_FROM_LOWEST_PART_OF_1ST_BYTE, NULL, NULL, "DEC", I_DEC },
    { 0x48, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVS", I_CMOVS },
    { 0x49, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVNS", I_CMOVNS },
    { 0x4C, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVL", I_CMOVL },
    { 0x4D, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVGE", I_CMOVGE },
    { 0x4E, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVLE", I_CMOVLE },
    { 0x4F, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "CMOVG", I_CMOVG },
    { 0x50, 0x00, F_X32_ONLY | F_PREFIX66_ALLOWED | F_REG32_IS_LOWEST_PART_OF_1ST_BYTE, c_OP_REG32_FROM_LOWEST_PART_OF_1ST_BYTE, NULL, NULL, "PUSH", I_PUSH },
    { 0x50, 0x00, F_X64_ONLY | F_PREFIX66_ALLOWED | F_REG64_IS_LOWEST_PART_OF_1ST_BYTE, c_OP_REG64_FROM_LOWEST_PART_OF_1ST_BYTE, NULL, NULL, "PUSH", I_PUSH },
    { 0x51, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "SQRTSD", I_SQRTSD }, // [!] второй операнд неверен
    { 0x54, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "ANDPD", I_ANDPD },
    { 0x54, 0x00, F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "ANDPS", I_ANDPS },
    { 0x56, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "ORPD", I_ORPD },
    { 0x57, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "XORPD", I_XORPD },
    { 0x57, 0x00, F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "XORPS", I_XORPS },
    { 0x58, 0x00, F_X32_ONLY | F_PREFIX66_ALLOWED | F_REG32_IS_LOWEST_PART_OF_1ST_BYTE, c_OP_REG32_FROM_LOWEST_PART_OF_1ST_BYTE, NULL, NULL, "POP", I_POP },
    { 0x58, 0x00, F_X64_ONLY | F_PREFIX66_ALLOWED | F_REG64_IS_LOWEST_PART_OF_1ST_BYTE, c_OP_REG64_FROM_LOWEST_PART_OF_1ST_BYTE, NULL, NULL, "POP", I_POP },
    { 0x58, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "ADDPD", I_ADDPD },
    { 0x58, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "ADDSD", I_ADDSD }, // [!] второй операнд неверен
    { 0x58, 0x00, F_F3 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "ADDSS", I_ADDSS },
    { 0x59, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MULPD", I_MULPD },
    { 0x59, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MULSD", I_MULSD },
    { 0x59, 0x00, F_F3 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MULSS", I_MULSS },
    { 0x5A, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "CVTSD2SS", I_CVTSD2SS }, // [!] второй операнд неверен
    { 0x5A, 0x00, F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "CVTPS2PD", I_CVTPS2PD }, // [!] второй операнд неверен
    { 0x5B, 0x00, F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "CVTDQ2PS", I_CVTDQ2PS }, // [!] второй операнд неверен
    { 0x5C, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "SUBPD", I_SUBPD },
    { 0x5C, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "SUBSD", I_SUBSD }, // [!] второй операнд неверен
    { 0x5C, 0x00, F_F3 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "SUBSS", I_SUBSS }, // [!] второй операнд неверен
    { 0x5D, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MINSD", I_MINSD }, // [!] второй операнд неверен
    { 0x5E, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "DIVSD", I_DIVSD }, // [!] второй операнд неверен
    { 0x5E, 0x00, F_F3 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "DIVSS", I_DIVSS }, // [!] второй операнд неверен
    { 0x5F, 0x00, F_F2 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MAXSD", I_MAXSD }, // [!] второй операнд неверен
    { 0x60, 0x00, 0, NULL, NULL, NULL, "PUSHA", I_PUSHA },
    { 0x61, 0x00, 0, NULL, NULL, NULL, "POPA", I_POPA },
    { 0x61, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PUNPCKLWD", I_PUNPCKLWD },
    { 0x62, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PUNPCKLDQ", I_PUNPCKLDQ },
    { 0x62, 0x00, F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "BOUND", I_BOUND },
    { 0x63, 0x00, F_X32_ONLY | F_MODRM, c_OP_MODRM_RM16, c_OP_MODRM_R16, NULL, "ARPL", I_ARPL },
    { 0x63, 0x00, F_X64_ONLY | F_MODRM, c_OP_MODRM_R64, c_OP_MODRM_RM32, NULL, "MOVSXD", I_MOVSXD },
    { 0x63, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PACKSSWB", I_PACKSSWB },
    { 0x65, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PCMPGTW", I_PCMPGTW },
    { 0x66, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PCMPGTD", I_PCMPGTD },
    { 0x68, 0x00, F_X32_ONLY | F_IMM32, c_OP_IMM32, NULL, NULL, "PUSH", I_PUSH },
    { 0x68, 0x00, F_X64_ONLY | F_IMM32, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, NULL, NULL, "PUSH", I_PUSH },
    { 0x69, 0x00, F_REXW_ABSENT | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, c_OP_IMM32, "IMUL", I_IMUL },
    { 0x69, 0x00, F_REXW_PRESENT | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_R64, c_OP_MODRM_RM64, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, "IMUL", I_IMUL },
    { 0x69, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PUNPCKHWD", I_PUNPCKHWD },
    { 0x6A, 0x00, F_X32_ONLY | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, NULL, NULL, "PUSH", I_PUSH }, // imm8 is signextended to dword
    { 0x6A, 0x00, F_X64_ONLY | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_IMM8_SIGN_EXTENDED_TO_IMM64, NULL, NULL, "PUSH", I_PUSH }, // imm8 is signextended to dword
    { 0x6A, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PUNPCKHDQ", I_PUNPCKHDQ },
    { 0x6B, 0x00, F_REXW_ABSENT | F_MODRM | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, "IMUL", I_IMUL },
    { 0x6B, 0x00, F_REXW_PRESENT | F_MODRM | F_IMM8, c_OP_MODRM_R64, c_OP_MODRM_RM64, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, "IMUL", I_IMUL },
    { 0x6B, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PACKSSDW", I_PACKSSDW },
    { 0x6C, 0x00, 0, NULL, NULL, NULL, "INSB", I_INSB },
    { 0x6C, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PUNPCKLQDQ", I_PUNPCKLQDQ },
    { 0x6D, 0x00, 0, NULL, NULL, NULL, "INSD", I_INSD },
    { 0x6D, 0x00, F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "INSW", I_INSW },
    { 0x6E, 0x00, 0, NULL, NULL, NULL, "OUTSB", I_OUTSB },
    { 0x6E, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM32, NULL, "MOVD", I_MOVD },
    { 0x6F, 0x00, 0, NULL, NULL, NULL, "OUTSD", I_OUTSD },
    { 0x6F, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MOVDQA", I_MOVDQA },
    { 0x6F, 0x00, F_F3 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MOVDQU", I_MOVDQU },
    { 0x6F, 0x00, F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "OUTSW", I_OUTSW },
    { 0x70, 0x00, F_0F | F_MODRM | F_IMM8 | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, c_OP_IMM8, "PSHUFD", I_PSHUFD },
    { 0x70, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JO", I_JO },
    { 0x71, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JNO", I_JNO },
    { 0x72, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JB", I_JB }, // JC, JNAE
    { 0x73, 0x00, F_0F | F_MODRM_REG_7 | F_MODRM | F_IMM8 | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_IMM8, NULL, "PSLLDQ", I_PSLLDQ },
    { 0x73, 0x00, F_MODRM_REG_2 | F_0F | F_MODRM | F_IMM8 | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_IMM8, NULL, "PSRLQ", I_PSRLQ }, // 2
    { 0x73, 0x00, F_MODRM_REG_3 | F_0F | F_MODRM | F_IMM8 | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_IMM8, NULL, "PSRLDQ", I_PSRLDQ }, // 3
    { 0x73, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JNB", I_JNB }, // JAE, JNC
    { 0x74, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JZ", I_JZ }, // JE
    { 0x75, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JNZ", I_JNZ }, // JNE
    { 0x75, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PCMPEQW", I_PCMPEQW },
    { 0x76, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JBE", I_JBE }, // JNA
    { 0x76, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PCMPEQD", I_PCMPEQD },
    { 0x77, 0x00, F_0F, NULL, NULL, NULL, "EMMS", I_EMMS },
    { 0x77, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JA", I_JA }, // JNBE
    { 0x78, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JS", I_JS },
    { 0x79, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JNS", I_JNS },
    { 0x7A, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JP", I_JP }, // JPE
    { 0x7B, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JNP", I_JNP }, // JPO
    { 0x7C, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JL", I_JL }, // JNGE
    { 0x7D, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JGE", I_JGE }, // JNL
    { 0x7E, 0x00, F_0F | F_REXW_ABSENT | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_RM32, c_OP_MODRM_R_XMM, NULL, "MOVD", I_MOVD },
    { 0x7E, 0x00, F_0F | F_REXW_PRESENT | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_RM64, c_OP_MODRM_R_XMM, NULL, "MOVQ", I_MOVQ },
    { 0x7E, 0x00, F_F3 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "MOVQ", I_MOVQ }, // [!] второй оп?
    { 0x7E, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JLE", I_JLE }, // JNG
    { 0x7F, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_RM_XMM, c_OP_MODRM_R_XMM, NULL, "MOVDQA", I_MOVDQA },
    { 0x7F, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JG", I_JG }, // JNLE
    { 0x80, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JO", I_JO },
    { 0x80, 0x00, F_MODRM_REG_0 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "ADD", I_ADD },
    { 0x80, 0x00, F_MODRM_REG_1 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "OR",  I_OR },
    { 0x80, 0x00, F_MODRM_REG_2 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "ADC",  I_ADC },
    { 0x80, 0x00, F_MODRM_REG_3 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "SBB", I_SBB },
    { 0x80, 0x00, F_MODRM_REG_4 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "AND", I_AND },
    { 0x80, 0x00, F_MODRM_REG_5 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "SUB", I_SUB },
    { 0x80, 0x00, F_MODRM_REG_6 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "XOR", I_XOR },
    { 0x80, 0x00, F_MODRM_REG_7 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "CMP", I_CMP },
    { 0x81, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JNO", I_JNO },
    { 0x81, 0x00, F_MODRM_REG_0 | F_REXW_PROMOTE_OP1_32_TO_64 | F_REXW_SIGN_EXTEND_OP2_32_TO_64 | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM32, NULL, "ADD", I_ADD },
    { 0x81, 0x00, F_MODRM_REG_1 | F_REXW_PROMOTE_OP1_32_TO_64 | F_REXW_SIGN_EXTEND_OP2_32_TO_64 | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM32, NULL, "OR",  I_OR },
    { 0x81, 0x00, F_MODRM_REG_2 | F_REXW_PROMOTE_OP1_32_TO_64 | F_REXW_SIGN_EXTEND_OP2_32_TO_64 | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM32, NULL, "ADC", I_ADC },
    { 0x81, 0x00, F_MODRM_REG_3 | F_REXW_PROMOTE_OP1_32_TO_64 | F_REXW_SIGN_EXTEND_OP2_32_TO_64 | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM32, NULL, "SBB", I_SBB },
    { 0x81, 0x00, F_MODRM_REG_4 | F_REXW_PROMOTE_OP1_32_TO_64 | F_REXW_SIGN_EXTEND_OP2_32_TO_64 | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM32, NULL, "AND", I_AND },
    { 0x81, 0x00, F_MODRM_REG_5 | F_REXW_PROMOTE_OP1_32_TO_64 | F_REXW_SIGN_EXTEND_OP2_32_TO_64 | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM32, NULL, "SUB", I_SUB },
    { 0x81, 0x00, F_MODRM_REG_6 | F_REXW_PROMOTE_OP1_32_TO_64 | F_REXW_SIGN_EXTEND_OP2_32_TO_64 | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM32, NULL, "XOR", I_XOR },
    { 0x81, 0x00, F_MODRM_REG_7 | F_REXW_PROMOTE_OP1_32_TO_64 | F_REXW_SIGN_EXTEND_OP2_32_TO_64 | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM32, NULL, "CMP", I_CMP },
    { 0x82, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JB", I_JB }, // or JC , JNAE
    { 0x82, 0x00, F_MODRM_REG_0 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "ADD", I_ADD }, // as copied from 0x80. it's synonims!
    { 0x82, 0x00, F_MODRM_REG_1 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "OR",  I_OR },
    { 0x82, 0x00, F_MODRM_REG_2 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "ADC",  I_ADC },
    { 0x82, 0x00, F_MODRM_REG_3 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "SBB", I_SBB },
    { 0x82, 0x00, F_MODRM_REG_4 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "AND", I_AND },
    { 0x82, 0x00, F_MODRM_REG_5 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "SUB", I_SUB },
    { 0x82, 0x00, F_MODRM_REG_6 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "XOR", I_XOR },
    { 0x82, 0x00, F_MODRM_REG_7 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "CMP", I_CMP },
    { 0x83, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JNB", I_JNB }, // JAE, JNC
    { 0x83, 0x00, F_MODRM_REG_0 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, NULL, "ADD", I_ADD },
    { 0x83, 0x00, F_MODRM_REG_1 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, NULL, "OR",  I_OR }, 
    { 0x83, 0x00, F_MODRM_REG_2 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, NULL, "ADC", I_ADC }, 
    { 0x83, 0x00, F_MODRM_REG_3 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, NULL, "SBB", I_SBB },
    { 0x83, 0x00, F_MODRM_REG_4 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, NULL, "AND", I_AND },
    { 0x83, 0x00, F_MODRM_REG_5 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, NULL, "SUB", I_SUB },
    { 0x83, 0x00, F_MODRM_REG_6 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, NULL, "XOR", I_XOR },
    { 0x83, 0x00, F_MODRM_REG_7 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM8_SIGN_EXTENDED_TO_IMM32, NULL, "CMP", I_CMP },
    { 0x84, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JZ", I_JZ }, // JE
    { 0x84, 0x00, F_MODRM, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "TEST", I_TEST },
    { 0x85, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JNZ", I_JNZ }, // JNE
    { 0x85, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "TEST", I_TEST },
    { 0x86, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JBE", I_JBE }, // JNA
    { 0x86, 0x00, F_MODRM, c_OP_MODRM_R8, c_OP_MODRM_RM8, NULL, "XCHG", I_XCHG },
    { 0x87, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JA", I_JA }, // JNBE
    { 0x87, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "XCHG", I_XCHG },
    { 0x88, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JS", I_JS },
    { 0x88, 0x00, F_MODRM, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "MOV", I_MOV },
    { 0x89, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JNS", I_JNS },
    { 0x89, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "MOV", I_MOV },
    { 0x8A, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JP", I_JP }, // JPE
    { 0x8A, 0x00, F_MODRM, c_OP_MODRM_R8, c_OP_MODRM_RM8, NULL, "MOV", I_MOV },
    { 0x8B, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JNP", I_JNP }, // JPO
    { 0x8B, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "MOV", I_MOV },
    { 0x8C, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JL", I_JL }, // JNGE
    { 0x8C, 0x00, F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM16, c_OP_MODRM_SREG, NULL, "MOV", I_MOV },
    { 0x8D, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JGE", I_JGE }, // JNL
    { 0x8D, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "LEA", I_LEA },
    { 0x8E, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JLE", I_JLE }, // JNG
    { 0x8E, 0x00, F_MODRM, c_OP_MODRM_SREG, c_OP_MODRM_RM16, NULL, "MOV", I_MOV },
    { 0x8F, 0x00, F_0F | F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JG", I_JG }, // JNLE
    { 0x8F, 0x00, F_MODRM_REG_0 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, NULL, NULL, "POP", I_POP },
    { 0x90, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_PREFIX66_ALLOWED | F_REG32_IS_LOWEST_PART_OF_1ST_BYTE, c_OP_EAX, c_OP_REG32_FROM_LOWEST_PART_OF_1ST_BYTE, NULL, "XCHG", I_XCHG },
    { 0x90, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETO", I_SETO },
    { 0x90, 0x00, F_F3, NULL, NULL, NULL, "PAUSE", I_PAUSE },
    { 0x91, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETNO",  I_SETNO },
    { 0x92, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETB", I_SETB }, // SETC, SETNAE
    { 0x93, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETNB", I_SETNB }, // SETAE, SETNC
    { 0x94, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETE", I_SETE }, // SETZ
    { 0x95, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETNE", I_SETNE }, // SETNZ
    { 0x96, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETBE", I_SETBE }, // SETNA
    { 0x97, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETA", I_SETA }, // SETNBE
    { 0x98, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETS", I_SETS },
    { 0x98, 0x00, F_REXW_ABSENT | F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "CBW", I_CBW },
    { 0x98, 0x00, F_REXW_ABSENT, NULL, NULL, NULL, "CWDE", I_CWDE },
    { 0x98, 0x00, F_REXW_PRESENT, NULL, NULL, NULL, "CDQE", I_CDQE },
    { 0x99, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETNS", I_SETNS },
    { 0x99, 0x00, F_REXW_ABSENT | F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "CWD", I_CWD },
    { 0x99, 0x00, F_REXW_ABSENT, NULL, NULL, NULL, "CDQ", I_CDQ },
    { 0x99, 0x00, F_REXW_PRESENT, NULL, NULL, NULL, "CQO", I_CQO },
    { 0x9A, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETP", I_SETP }, // SETPE
    { 0x9B, 0x00, 0, NULL, NULL, NULL, "WAIT", I_WAIT }, // or FWAIT
    { 0x9B, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETNP", I_SETNP }, // SETPO
    { 0x9C, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETL", I_SETL }, // SETNGE
    { 0x9C, 0x00, F_X32_ONLY, NULL, NULL, NULL, "PUSHFD", I_PUSHFD },
    { 0x9C, 0x00, F_X64_ONLY, NULL, NULL, NULL, "PUSHFQ", I_PUSHFQ },
    { 0x9D, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETGE", I_SETGE }, // SETNL
    { 0x9D, 0x00, F_X32_ONLY, NULL, NULL, NULL, "POPFD", I_POPFD },
    { 0x9D, 0x00, F_X64_ONLY, NULL, NULL, NULL, "POPFQ", I_POPFQ },
    { 0x9E, 0x00, 0, NULL, NULL, NULL, "SAHF", I_SAHF },
    { 0x9E, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETLE", I_SETLE }, // SETNG
    { 0x9F, 0x00, 0, NULL, NULL, NULL, "LAHF", I_LAHF },
    { 0x9F, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "SETG", I_SETG }, // SETNLE
    { 0xA0, 0x00, F_X32_ONLY | F_PTR, c_OP_AL, c_OP_MOFFS8, NULL, "MOV", I_MOV },
    
    // FIXME: untested
    { 0xA0, 0x00, F_X64_ONLY | F_IMM64, c_OP_AL, c_OP_IMM64_AS_ABSOLUTE_ADDRESS_PTR_TO_BYTE, NULL, "MOV", I_MOV },
    
    { 0xA1, 0x00, F_X32_ONLY | F_PTR | F_PREFIX66_ALLOWED, c_OP_EAX, c_OP_MOFFS32, NULL, "MOV", I_MOV },
    
    // FIXME: untested
    { 0xA1, 0x00, F_X64_ONLY | F_IMM64, c_OP_EAX, c_OP_IMM64_AS_ABSOLUTE_ADDRESS_PTR_TO_DWORD, NULL, "MOV", I_MOV },
    
    { 0xA2, 0x00, F_0F, NULL, NULL, NULL, "CPUID", I_CPUID },
    { 0xA2, 0x00, F_X32_ONLY | F_PTR, c_OP_MOFFS8, c_OP_AL, NULL, "MOV", I_MOV }, // mov byte ptr [x], al
    
    // FIXME: untested
    { 0xA2, 0x00, F_X64_ONLY | F_IMM64, c_OP_IMM64_AS_ABSOLUTE_ADDRESS_PTR_TO_BYTE, c_OP_AL, NULL, "MOV", I_MOV }, // mov byte ptr [x], al
    
    { 0xA3, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "BT", I_BT },
    { 0xA3, 0x00, F_X32_ONLY | F_PTR | F_PREFIX66_ALLOWED, c_OP_MOFFS32, c_OP_EAX, NULL, "MOV", I_MOV },
    
    // FIXME: untested
    { 0xA3, 0x00, F_X64_ONLY | F_IMM64 | F_PREFIX66_ALLOWED, c_OP_IMM64_AS_ABSOLUTE_ADDRESS_PTR_TO_DWORD, c_OP_EAX, NULL, "MOV", I_MOV },
    
    { 0xA4, 0x00, 0, NULL, NULL, NULL, "MOVSB", I_MOVSB },
    { 0xA4, 0x00, F_0F | F_MODRM | F_IMM8, c_OP_MODRM_RM32, c_OP_MODRM_R32, c_OP_IMM8, "SHLD", I_SHLD },
    { 0xA4, 0x00, F_F3, NULL, NULL, NULL, "REP MOVSB", I_REP_MOVSB },
    { 0xA5, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM32, c_OP_MODRM_R32, c_OP_CL, "SHLD", I_SHLD },
    { 0xA5, 0x00, F_F3 | F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "REP MOVSW", I_REP_MOVSW },
    { 0xA5, 0x00, F_F3 | F_REXW_ABSENT, NULL, NULL, NULL, "REP MOVSD", I_REP_MOVSD },
    { 0xA5, 0x00, F_F3 | F_REXW_PRESENT, NULL, NULL, NULL, "REP MOVSQ", I_REP_MOVSQ },
    { 0xA5, 0x00, F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "MOVSW", I_MOVSW },
    { 0xA5, 0x00, F_REXW_ABSENT, NULL, NULL, NULL, "MOVSD", I_MOVSD },
    { 0xA5, 0x00, F_REXW_PRESENT, NULL, NULL, NULL, "MOVSQ", I_MOVSQ },
    { 0xA6, 0x00, 0, NULL, NULL, NULL, "CMPSB", I_CMPSB },
    { 0xA6, 0x00, F_F3, NULL, NULL, NULL, "REP CMPSB", I_REP_CMPSB },
    { 0xA7, 0x00, F_F3 | F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "REP CMPSW", I_REP_CMPSW },
    { 0xA7, 0x00, F_F3, NULL, NULL, NULL, "REP CMPSD", I_REP_CMPSD },
    { 0xA7, 0x00, F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "CMPSW", I_CMPSW },
    { 0xA7, 0x00, F_REXW_ABSENT, NULL, NULL, NULL, "CMPSD", I_CMPSD },
    { 0xA7, 0x00, F_REXW_PRESENT, NULL, NULL, NULL, "CMPSQ", I_CMPSQ },
    { 0xA8, 0x00, F_0F, c_OP_GS, NULL, NULL, "PUSH", I_PUSH },
    { 0xA8, 0x00, F_IMM8, c_OP_AL, c_OP_IMM8, NULL, "TEST", I_TEST },
    { 0xA9, 0x00, F_0F, c_OP_GS, NULL, NULL, "POP", I_POP },
    { 0xA9, 0x00, F_REXW_ABSENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_EAX, c_OP_IMM32, NULL, "TEST", I_TEST },
    { 0xA9, 0x00, F_REXW_PRESENT | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_RAX, c_OP_IMM32_SIGN_EXTENDED_TO_IMM64, NULL, "TEST", I_TEST },
    { 0xAA, 0x00, 0, NULL, NULL, NULL, "STOSB", I_STOSB },
    { 0xAA, 0x00, F_F3, NULL, NULL, NULL, "REP STOSB", I_REP_STOSB },
    { 0xAB, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "BTS", I_BTS },
    { 0xAB, 0x00, F_F3 | F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "REP STOSW", I_REP_STOSW },
    { 0xAB, 0x00, F_F3 | F_REXW_PRESENT, NULL, NULL, NULL, "REP STOSQ", I_REP_STOSQ },
    { 0xAB, 0x00, F_F3, NULL, NULL, NULL, "REP STOSD", I_REP_STOSD },
    { 0xAB, 0x00, F_REXW_ABSENT | F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "STOSW", I_STOSW },
    { 0xAB, 0x00, F_REXW_ABSENT, NULL, NULL, NULL, "STOSD", I_STOSD },
    { 0xAB, 0x00, F_REXW_PRESENT, NULL, NULL, NULL, "STOSQ", I_STOSQ },
    { 0xAC, 0x00, 0, NULL, NULL, NULL, "LODSB", I_LODSB },
    { 0xAC, 0x00, F_0F | F_MODRM | F_IMM8 | 0, c_OP_MODRM_RM32, c_OP_MODRM_R32, c_OP_IMM8, "SHRD", I_SHRD },
    { 0xAD, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM32, c_OP_MODRM_R32, c_OP_CL, "SHRD", I_SHRD },
    { 0xAD, 0x00, F_REXW_ABSENT, NULL, NULL, NULL, "LODSD", I_LODSD },
    { 0xAD, 0x00, F_REXW_PRESENT, NULL, NULL, NULL, "LODSQ", I_LODSQ },
    { 0xAE, 0x00, 0, NULL, NULL, NULL, "SCASB", I_SCASB },
    { 0xAE, 0x00, F_0F | F_MODRM_REG_0 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FXSAVE", I_FXSAVE }, // actually, op1 is m512btye
    { 0xAE, 0x00, F_0F | F_MODRM_REG_2 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "LDMXCSR", I_LDMXCSR },
    { 0xAE, 0x00, F_0F | F_MODRM_REG_3 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "STMXCSR", I_STMXCSR },
    { 0xAE, 0x00, F_0F | F_MODRM_REG_5 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "LFENCE", I_LFENCE },
    { 0xAE, 0x00, F_F2, NULL, NULL, NULL, "REPNE SCASB", I_REPNE_SCASB },
    { 0xAE, 0x00, F_F3, NULL, NULL, NULL, "REPE SCASB", I_REPE_SCASB },
    { 0xAF, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "IMUL", I_IMUL },
    { 0xAF, 0x00, F_F2 | F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "REPNE SCASW", I_REPNE_SCASW },
    { 0xAF, 0x00, F_F2, NULL, NULL, NULL, "REPNE SCASD", I_REPNE_SCASD },
    { 0xAF, 0x00, F_F3 | F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "REPE SCASW", I_REPE_SCASW },
    { 0xAF, 0x00, F_F3, NULL, NULL, NULL, "REPE SCASD", I_REPE_SCASD },
    { 0xAF, 0x00, F_PREFIX66_IS_PART_OF_OPCODE, NULL, NULL, NULL, "SCASW", I_SCASW },
    { 0xAF, 0x00, F_REXW_ABSENT, NULL, NULL, NULL, "SCASD", I_SCASD },
    { 0xAF, 0x00, F_REXW_PRESENT, NULL, NULL, NULL, "SCASQ", I_SCASQ },
    { 0xB0, 0x00, F_IMM8 | F_REG32_IS_LOWEST_PART_OF_1ST_BYTE, c_OP_REG8_FROM_LOWEST_PART_OF_1ST_BYTE, c_OP_IMM8, NULL, "MOV", I_MOV },
    { 0xB0, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM8, c_OP_MODRM_R8, NULL, "CMPXCHG", I_CMPXCHG },
    { 0xB1, 0x00, F_0F | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "CMPXCHG", I_CMPXCHG },
    { 0xB3, 0x00, F_0F | F_MODRM, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "BTR", I_BTR },
    { 0xB6, 0x00, F_0F | F_REXW_ABSENT | F_MODRM | F_PREFIX66_APPLIED_TO_OP1_ONLY, c_OP_MODRM_R32, c_OP_MODRM_RM8, NULL, "MOVZX", I_MOVZX },
    { 0xB6, 0x00, F_0F | F_REXW_PRESENT | F_MODRM | F_PREFIX66_APPLIED_TO_OP1_ONLY, c_OP_MODRM_R64, c_OP_MODRM_RM8, NULL, "MOVZX", I_MOVZX },
    { 0xB7, 0x00, F_0F | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM16, NULL, "MOVZX", I_MOVZX }, // word ptr!
    { 0xB8, 0x00, F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_IMM32 | F_PREFIX66_ALLOWED | F_REG32_IS_LOWEST_PART_OF_1ST_BYTE, c_OP_REG32_FROM_LOWEST_PART_OF_1ST_BYTE, c_OP_IMM32, NULL, "MOV", I_MOV },
    { 0xBA, 0x00, F_MODRM_REG_4 | F_0F | F_PREFIX66_ALLOWED | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_IMM8, c_OP_MODRM_RM32, c_OP_IMM8, NULL, "BT",  I_BT },
    { 0xBA, 0x00, F_MODRM_REG_5 | F_0F | F_PREFIX66_ALLOWED | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_IMM8, c_OP_MODRM_RM32, c_OP_IMM8, NULL, "BTS", I_BTS },
    { 0xBA, 0x00, F_MODRM_REG_6 | F_0F | F_PREFIX66_ALLOWED | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_IMM8, c_OP_MODRM_RM32, c_OP_IMM8, NULL, "BTR", I_BTR },
    { 0xBA, 0x00, F_MODRM_REG_7 | F_0F | F_PREFIX66_ALLOWED | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_IMM8, c_OP_MODRM_RM32, c_OP_IMM8, NULL, "BTC", I_BTC },
    { 0xBC, 0x00, F_0F | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "BSF", I_BSF },
    { 0xBD, 0x00, F_0F | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM32, NULL, "BSR", I_BSR },
    { 0xBE, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_APPLIED_TO_OP1_ONLY, c_OP_MODRM_R32, c_OP_MODRM_RM8, NULL, "MOVSX", I_MOVSX },
    { 0xBF, 0x00, F_0F | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM, c_OP_MODRM_R32, c_OP_MODRM_RM16, NULL, "MOVSX", I_MOVSX },
    { 0xC0, 0x00, F_MODRM_REG_1 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "ROR", I_ROR },
    { 0xC0, 0x00, F_MODRM_REG_2 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "RCL", I_RCL },
    { 0xC0, 0x00, F_MODRM_REG_4 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "SHL", I_SHL },
    { 0xC0, 0x00, F_MODRM_REG_5 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "SHR", I_SHR },
    { 0xC0, 0x00, F_MODRM_REG_7 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "SAR", I_SAR },
    { 0xC1, 0x00, F_0F | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM, c_OP_MODRM_RM32, c_OP_MODRM_R32, NULL, "XADD", I_XADD },
    { 0xC1, 0x00, F_MODRM_REG_0 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_APPLIED_TO_OP1_ONLY, c_OP_MODRM_RM32, c_OP_IMM8, NULL, "ROL", I_ROL },
    { 0xC1, 0x00, F_MODRM_REG_1 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_APPLIED_TO_OP1_ONLY, c_OP_MODRM_RM32, c_OP_IMM8, NULL, "ROR", I_ROR },
    { 0xC1, 0x00, F_MODRM_REG_2 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_APPLIED_TO_OP1_ONLY, c_OP_MODRM_RM32, c_OP_IMM8, NULL, "RCL", I_RCL },
    { 0xC1, 0x00, F_MODRM_REG_4 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_APPLIED_TO_OP1_ONLY, c_OP_MODRM_RM32, c_OP_IMM8, NULL, "SHL", I_SHL },
    { 0xC1, 0x00, F_MODRM_REG_5 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_APPLIED_TO_OP1_ONLY, c_OP_MODRM_RM32, c_OP_IMM8, NULL, "SHR", I_SHR },
    { 0xC1, 0x00, F_MODRM_REG_7 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_IMM8 | F_PREFIX66_APPLIED_TO_OP1_ONLY, c_OP_MODRM_RM32, c_OP_IMM8, NULL, "SAR", I_SAR },
    { 0xC2, 0x00, F_0F | F_MODRM | F_IMM8 | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, c_OP_IMM8, "CMPPD", I_CMPPD },
    { 0xC2, 0x00, F_IMM16, c_OP_IMM16, NULL, NULL, "RETN", I_RETN },
    { 0xC3, 0x00, 0, NULL, NULL, NULL, "RETN", I_RETN },
    { 0xC3, 0x00, F_F3, NULL, NULL, NULL, "RETN", I_RETN },
    { 0xC4, 0x00, F_0F | F_MODRM | F_IMM8 | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM32, c_OP_IMM8, "PINSRW", I_PINSRW }, // [!] костыль. на самом деле надо не так.
    { 0xC5, 0x00, F_0F | F_MODRM | F_IMM8 | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R32, c_OP_MODRM_RM_XMM, c_OP_IMM8, "PEXTRW", I_PEXTRW },
    { 0xC6, 0x00, F_MODRM_REG_0 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "MOV", I_MOV },
    { 0xC7, 0x00, F_MODRM_REG_0 | F_REXW_PROMOTE_OP1_32_TO_64 | F_REXW_SIGN_EXTEND_OP2_32_TO_64 | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM32, NULL, "MOV", I_MOV },
    { 0xC7, 0x00, F_MODRM_REG_1 | F_0F | F_MODRM, c_OP_MODRM_RM_MM, NULL, NULL, "CMPXCHG8B", I_CMPXCHG8B }, // 1
    { 0xC8, 0x00, F_0F | F_MODRM | F_REG32_IS_LOWEST_PART_OF_1ST_BYTE, c_OP_REG32_FROM_LOWEST_PART_OF_1ST_BYTE, NULL, NULL, "BSWAP", I_BSWAP },
    { 0xC8, 0x00, F_X32_ONLY | F_IMM16 | F_IMM8, c_OP_IMM16_SIGN_EXTENDED_TO_IMM32, c_OP_IMM8, NULL, "ENTER", I_ENTER },
    { 0xC8, 0x00, F_X64_ONLY | F_IMM16 | F_IMM8, c_OP_IMM16_SIGN_EXTENDED_TO_IMM64, c_OP_IMM8, NULL, "ENTER", I_ENTER },
    { 0xC9, 0x00, 0, NULL, NULL, NULL, "LEAVE", I_LEAVE },
    { 0xCA, 0x00, F_IMM16, c_OP_IMM16, NULL, NULL, "RETF", I_RETF },
    { 0xCB, 0x00, 0, NULL, NULL, NULL, "RETF", I_RETF },
    { 0xCC, 0x00, 0, NULL, NULL, NULL, "INT3", I_INT3 },
    { 0xCD, 0x00, F_IMM8, c_OP_IMM8, NULL, NULL, "INT", I_INT },
    { 0xCE, 0x00, 0, NULL, NULL, NULL, "INTO", I_INTO },
    { 0xCF, 0x00, F_REXW_ABSENT, NULL, NULL, NULL, "IRETD", I_IRETD },
    { 0xCF, 0x00, F_REXW_PRESENT, NULL, NULL, NULL, "IRETQ", I_IRETQ },
    { 0xD0, 0x00, F_MODRM_REG_0 | F_MODRM, c_OP_MODRM_RM8, c_OP_1, NULL, "ROL", I_ROL },
    { 0xD0, 0x00, F_MODRM_REG_1 | F_MODRM, c_OP_MODRM_RM8, c_OP_1, NULL, "ROR", I_ROR },
    { 0xD0, 0x00, F_MODRM_REG_2 | F_MODRM, c_OP_MODRM_RM8, c_OP_1, NULL, "RCL", I_RCL },
    { 0xD0, 0x00, F_MODRM_REG_4 | F_MODRM, c_OP_MODRM_RM8, c_OP_1, NULL, "SHL", I_SHL },
    { 0xD0, 0x00, F_MODRM_REG_5 | F_MODRM, c_OP_MODRM_RM8, c_OP_1, NULL, "SHR", I_SHR },
    { 0xD0, 0x00, F_MODRM_REG_7 | F_MODRM, c_OP_MODRM_RM8, c_OP_1, NULL, "SAR", I_SAR },
    { 0xD1, 0x00, F_MODRM_REG_0 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_1, NULL, "ROL", I_ROL },
    { 0xD1, 0x00, F_MODRM_REG_1 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_1, NULL, "ROR", I_ROR },
    { 0xD1, 0x00, F_MODRM_REG_2 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_1, NULL, "RCL", I_RCL },
    { 0xD1, 0x00, F_MODRM_REG_3 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_1, NULL, "RCR", I_RCR },
    { 0xD1, 0x00, F_MODRM_REG_4 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_1, NULL, "SHL", I_SHL },
    { 0xD1, 0x00, F_MODRM_REG_5 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_1, NULL, "SHR", I_SHR },
    { 0xD1, 0x00, F_MODRM_REG_7 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_1, NULL, "SAR", I_SAR },
    { 0xD1, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PSRLW", I_PSRLW },
    { 0xD2, 0x00, F_MODRM_REG_1 | F_MODRM, c_OP_MODRM_RM8, c_OP_CL, NULL, "ROR", I_ROR },
    { 0xD2, 0x00, F_MODRM_REG_2 | F_MODRM, c_OP_MODRM_RM8, c_OP_CL, NULL, "RCL", I_RCL },
    { 0xD2, 0x00, F_MODRM_REG_4 | F_MODRM, c_OP_MODRM_RM8, c_OP_CL, NULL, "SHL", I_SHL },
    { 0xD2, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PSRLD", I_PSRLD },
    { 0xD3, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PSRLQ", I_PSRLQ }, // 2
    { 0xD3, 0x00, F_MODRM_REG_0 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM, c_OP_MODRM_RM32, c_OP_CL, NULL, "ROL", I_ROL },
    { 0xD3, 0x00, F_MODRM_REG_1 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM, c_OP_MODRM_RM32, c_OP_CL, NULL, "ROR", I_ROR },
    { 0xD3, 0x00, F_MODRM_REG_2 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM, c_OP_MODRM_RM32, c_OP_CL, NULL, "RCL", I_RCL },
    { 0xD3, 0x00, F_MODRM_REG_4 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM, c_OP_MODRM_RM32, c_OP_CL, NULL, "SHL", I_SHL },
    { 0xD3, 0x00, F_MODRM_REG_5 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM, c_OP_MODRM_RM32, c_OP_CL, NULL, "SHR", I_SHR },
    { 0xD3, 0x00, F_MODRM_REG_7 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM, c_OP_MODRM_RM32, c_OP_CL, NULL, "SAR", I_SAR },
    { 0xD4, 0x00, F_IMM8, c_OP_IMM8, NULL, NULL, "AAM", I_AAM },
    { 0xD5, 0x00, F_IMM8, c_OP_IMM8, NULL, NULL, "AAD", I_AAD },
    { 0xD6, 0x00, 0, NULL, NULL, NULL, "SETALC", I_SETALC }, // AKA SALC, undocummented
    { 0xD6, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_RM_MM, c_OP_MODRM_R_XMM, NULL, "MOVQ", I_MOVQ },
    { 0xD7, 0x00, 0, NULL, NULL, NULL, "XLAT", I_XLAT },
    { 0xD7, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R32, c_OP_MODRM_RM_XMM, NULL, "PMOVMSKB", I_PMOVMSKB },
    { 0xD8, 0x00, F_MODRM_REG_0 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FADD", I_FADD }, // /0
    { 0xD8, 0x00, F_MODRM_REG_1 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FMUL", I_FMUL }, // /1
    { 0xD8, 0x00, F_MODRM_REG_2 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FCOM", I_FCOM }, // /2
    { 0xD8, 0x00, F_MODRM_REG_3 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FCOMP", I_FCOMP },// /3
    { 0xD8, 0x00, F_MODRM_REG_4 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FSUB", I_FSUB }, // /4
    { 0xD8, 0x00, F_MODRM_REG_5 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM32, c_OP_ST0, NULL, "FSUBR", I_FSUBR }, // /5
    { 0xD8, 0x00, F_MODRM_REG_6 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FDIV", I_FDIV }, // /6
    { 0xD8, 0x00, F_MODRM_REG_7 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM32, c_OP_ST0, NULL, "FDIVR", I_FDIVR },// /7
    { 0xD9, 0x00, F_MODRM_REG_0 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FLD", I_FLD },
    { 0xD9, 0x00, F_MODRM_REG_2 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FST", I_FST },
    { 0xD9, 0x00, F_MODRM_REG_3 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FSTP", I_FSTP },
    { 0xD9, 0x00, F_MODRM_REG_1 | F_MODRM_MOD_IS_3 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FXCH", I_FXCH },
    { 0xD9, 0x00, F_MODRM_REG_4 | F_MODRM_MOD_IS_3 | F_MODRM_RM_0 | F_MODRM, NULL, NULL, NULL, "FCHS", I_FCHS },
    { 0xD9, 0x00, F_MODRM_REG_4 | F_MODRM_MOD_IS_3 | F_MODRM_RM_1 | F_MODRM, NULL, NULL, NULL, "FABS", I_FABS },
    { 0xD9, 0x00, F_MODRM_REG_4 | F_MODRM_MOD_IS_3 | F_MODRM_RM_5 | F_MODRM, NULL, NULL, NULL, "FXAM", I_FXAM },
    { 0xD9, 0x00, F_MODRM_REG_4 | F_MODRM_MOD_IS_NOT_3 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FLDENV", I_FLDENV },
    { 0xD9, 0x00, F_MODRM_REG_5 | F_MODRM_MOD_IS_3 | F_MODRM_RM_0 | F_MODRM, NULL, NULL, NULL, "FLD1", I_FLD1 },
    { 0xD9, 0x00, F_MODRM_REG_5 | F_MODRM_MOD_IS_3 | F_MODRM_RM_1 | F_MODRM, NULL, NULL, NULL, "FLDL2T", I_FLDL2T },
    { 0xD9, 0x00, F_MODRM_REG_5 | F_MODRM_MOD_IS_3 | F_MODRM_RM_2 | F_MODRM, NULL, NULL, NULL, "FLDL2E", I_FLDL2E },
    { 0xD9, 0x00, F_MODRM_REG_5 | F_MODRM_MOD_IS_3 | F_MODRM_RM_3 | F_MODRM, NULL, NULL, NULL, "FLDPI", I_FLDPI },
    { 0xD9, 0x00, F_MODRM_REG_5 | F_MODRM_MOD_IS_3 | F_MODRM_RM_4 | F_MODRM, NULL, NULL, NULL, "FLDLG2", I_FLDLG2 },
    { 0xD9, 0x00, F_MODRM_REG_5 | F_MODRM_MOD_IS_3 | F_MODRM_RM_5 | F_MODRM, NULL, NULL, NULL, "FLDLN2", I_FLDLN2 },
    { 0xD9, 0x00, F_MODRM_REG_5 | F_MODRM_MOD_IS_3 | F_MODRM_RM_6 | F_MODRM, NULL, NULL, NULL, "FLDZ", I_FLDZ },
    { 0xD9, 0x00, F_MODRM_REG_5 | F_MODRM_MOD_IS_NOT_3 | F_MODRM, c_OP_MODRM_RM16, NULL, NULL, "FLDCW", I_FLDCW }, // Loads a 16-bit value from the specified memory location into the x87 control word.
    { 0xD9, 0x00, F_MODRM_REG_6 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FNSTENV", I_FNSTENV }, 
    { 0xD9, 0x00, F_MODRM_REG_7 | F_MODRM_MOD_IS_3 | F_MODRM_RM_7 | F_MODRM, NULL, NULL, NULL, "FCOS", I_FCOS },
    { 0xD9, 0x00, F_MODRM_REG_7 | F_MODRM_MOD_IS_NOT_3 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FNSTCW", I_FNSTCW }, // store two bytes
    { 0xDA, 0x00, F_MODRM_REG_0 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FIADD", I_FIADD },
    { 0xDA, 0x00, F_MODRM_REG_2 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM_MOD_IS_3 | F_MODRM_RM_0 | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FCMOVBE", I_FCMOVBE },
    { 0xDA, 0x00, F_MODRM_REG_2 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FICOM", I_FICOM },
    { 0xDA, 0x00, F_MODRM_REG_3 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FICOMP", I_FICOMP },
    { 0xDA, 0x00, F_MODRM_REG_5 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM | F_MODRM_MOD_IS_3 | F_MODRM_RM_1, c_OP_ST0, c_OP_ST1, NULL, "FUCOMPP", I_FUCOMPP },
    { 0xDA, 0x00, F_MODRM_REG_5 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM32, c_OP_ST0, NULL, "FISUBR", I_FISUBR },
    { 0xDB, 0x00, F_MODRM_REG_0 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FILD", I_FILD },
    { 0xDB, 0x00, F_MODRM_REG_2 | F_MODRM | F_MODRM_MOD_IS_3 | F_MODRM_RM_0, c_OP_ST0, c_OP_MODRM_RM32, NULL, "FCMOVNBE", I_FCMOVNBE },
    { 0xDB, 0x00, F_MODRM_REG_2 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FIST", I_FIST },
    { 0xDB, 0x00, F_MODRM_REG_3 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FISTP", I_FISTP },
    { 0xDB, 0x00, F_MODRM_REG_4 | F_MODRM_RM_2 | F_MODRM, NULL, NULL, NULL, "FNCLEX", I_FNCLEX }, // e2, rm=2
    { 0xDB, 0x00, F_MODRM_REG_4 | F_MODRM_RM_3 | F_MODRM, NULL, NULL, NULL, "FNINIT", I_FNINIT }, // e3, rm=3
    { 0xDB, 0x00, F_MODRM_REG_5 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FLD", I_FLD }, // op_modrm_rm - 80 bit!
    { 0xDB, 0x00, F_MODRM_REG_7 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FSTP", I_FSTP }, // op_modrm_rm - 80 bit!
    { 0xDB, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PAND", I_PAND },
    { 0xDC, 0x00, F_MODRM_REG_0 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_M64FP, c_OP_ST0, NULL, "FADD", I_FADD },
    { 0xDC, 0x00, F_MODRM_REG_1 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_M64FP, c_OP_ST0, NULL, "FMUL", I_FMUL },
    { 0xDC, 0x00, F_MODRM_REG_2 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_M64FP, c_OP_ST0, NULL, "FCOM", I_FCOM },
    { 0xDC, 0x00, F_MODRM_REG_3 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_M64FP, c_OP_ST0, NULL, "FCOMP", I_FCOMP },
    { 0xDC, 0x00, F_MODRM_REG_4 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_M64FP, c_OP_ST0, NULL, "FSUB", I_FSUB },
    { 0xDC, 0x00, F_MODRM_REG_5 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_M64FP, c_OP_ST0, NULL, "FSUBR", I_FSUBR },
    { 0xDC, 0x00, F_MODRM_REG_6 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_M64FP, c_OP_ST0, NULL, "FDIV", I_FDIV },
    { 0xDC, 0x00, F_MODRM_REG_7 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_M64FP, c_OP_ST0, NULL, "FDIVR", I_FDIVR },
    { 0xDD, 0x00, F_MODRM_REG_0 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_MM, NULL, NULL, "FLD", I_FLD },
    { 0xDD, 0x00, F_MODRM_REG_2 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_M64FP, NULL, NULL, "FST", I_FST },
    { 0xDD, 0x00, F_MODRM_REG_3 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_MM, NULL, NULL, "FSTP", I_FSTP },
    { 0xDD, 0x00, F_MODRM_REG_4 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_MM, NULL, NULL, "FUCOM", I_FUCOM },
    { 0xDD, 0x00, F_MODRM_REG_5 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM_MM, NULL, NULL, "FUCOMP", I_FUCOMP },
    { 0xDD, 0x00, F_MODRM_REG_7 | F_MODRM, c_OP_MODRM_RM16, NULL, NULL, "FSTSW", I_FSTSW },
    
    { 0xDE, 0x00, F_MODRM_REG_2 | F_MODRM, c_OP_MODRM_RM16, NULL, NULL, "FICOM", I_FICOM },
    { 0xDE, 0x00, F_MODRM_REG_3 | F_MODRM, c_OP_MODRM_RM16, NULL, NULL, "FICOMP", I_FICOMP },
    { 0xDE, 0x00, F_MODRM_MOD_IS_3 | F_MODRM_REG_1 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM32, c_OP_ST0, NULL, "FMULP", I_FMULP },
    { 0xDE, 0x00, F_MODRM_MOD_IS_3 | F_MODRM_REG_7 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM32, c_OP_ST0, NULL, "FDIVP", I_FDIVP },
    { 0xDE, 0x00, F_MODRM_MOD_IS_3 | F_MODRM_REG_6 | F_WHEN_MOD3_TREAT_RM_AS_STx | F_MODRM, c_OP_MODRM_RM32, c_OP_ST0, NULL, "FDIVRP", I_FDIVRP },

    { 0xDF, 0x00, F_MODRM_REG_0 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "FILD", I_FILD },
    { 0xDF, 0x00, F_MODRM_REG_2 | F_MODRM, c_OP_MODRM_RM16, NULL, NULL, "FIST", I_FIST },
    { 0xDF, 0x00, F_MODRM_REG_3 | F_MODRM, c_OP_MODRM_RM16, NULL, NULL, "FISTP", I_FISTP },
    { 0xDF, 0x00, F_MODRM_REG_4 | F_MODRM_RM_0 | F_MODRM, c_OP_AX, NULL, NULL, "FNSTSW", I_FNSTSW },
    { 0xDF, 0x00, F_MODRM_REG_5 | F_MODRM, c_OP_MODRM_RM_MM, NULL, NULL, "FILD", I_FILD },
    { 0xDF, 0x00, F_MODRM_REG_7 | F_MODRM, c_OP_MODRM_RM_MM, NULL, NULL, "FISTP", I_FISTP },
    { 0xE0, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "LOOPNE", I_LOOPNE },
    { 0xE1, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "LOOPE", I_LOOPE },
    { 0xE2, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "LOOP", I_LOOP },
    { 0xE3, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JECXZ", I_JECXZ },
    { 0xE4, 0x00, F_IMM8, c_OP_AL, c_OP_IMM8, NULL, "IN", I_IN },
    { 0xE5, 0x00, F_IMM8 | F_PREFIX66_ALLOWED, c_OP_EAX, c_OP_IMM8, NULL, "IN", I_IN },
    { 0xE6, 0x00, F_F3 | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "CVTDQ2PD", I_CVTDQ2PD }, // [!] второй операнд неверен
    { 0xE6, 0x00, F_IMM8, c_OP_IMM8, c_OP_AL, NULL, "OUT", I_OUT },
    { 0xE7, 0x00, F_IMM8 | F_PREFIX66_ALLOWED, c_OP_IMM8, c_OP_EAX, NULL, "OUT", I_OUT },
    { 0xE8, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "CALL", I_CALL },
    { 0xE9, 0x00, F_X32_ONLY | F_IMM32, c_OP_IMM32_AS_REL32, NULL, NULL, "JMP", I_JMP },
    { 0xE9, 0x00, F_X64_ONLY | F_IMM32, c_OP_IMM32_SIGN_EXTENDED_TO_REL64, NULL, NULL, "JMP", I_JMP },
    { 0xE9, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PSUBSW", I_PSUBSW },
    { 0xEA, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PMINSW", I_PMINSW },
    { 0xEB, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "POR", I_POR },
    { 0xEB, 0x00, F_X64_PROMOTE_OP1_32_TO_64 | F_IMM8, c_OP_IMM8_AS_REL32, NULL, NULL, "JMP", I_JMP },
    { 0xEC, 0x00, 0, c_OP_AL, c_OP_DX, NULL, "IN", I_IN },
    { 0xED, 0x00, F_PREFIX66_ALLOWED, c_OP_EAX, c_OP_DX, NULL, "IN", I_IN },
    { 0xED, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PADDSW", I_PADDSW },
    { 0xEE, 0x00, 0, c_OP_DX, c_OP_AL, NULL, "OUT", I_OUT },
    { 0xEE, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PMAXSW", I_PMAXSW },
    { 0xEF, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PXOR", I_PXOR },
    { 0xEF, 0x00, F_PREFIX66_ALLOWED, c_OP_DX, c_OP_EAX, NULL, "OUT", I_OUT },
    { 0xF1, 0x00, 0, NULL, NULL, NULL, "ICEBP", I_ICEBP }, // undocummented
    { 0xF3, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PSLLQ", I_PSLLQ },
    { 0xF4, 0x00, 0, NULL, NULL, NULL, "HLT", I_HLT },
    { 0xF5, 0x00, 0, NULL, NULL, NULL, "CMC", I_CMC },
    { 0xF6, 0x00, F_MODRM_REG_0 | F_MODRM | F_IMM8, c_OP_MODRM_RM8, c_OP_IMM8, NULL, "TEST", I_TEST },
    { 0xF6, 0x00, F_MODRM_REG_2 | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "NOT", I_NOT },
    { 0xF6, 0x00, F_MODRM_REG_3 | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "NEG", I_NEG },
    { 0xF6, 0x00, F_MODRM_REG_4 | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "MUL", I_MUL },
    { 0xF6, 0x00, F_MODRM_REG_5 | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "IMUL", I_IMUL },
    { 0xF6, 0x00, F_MODRM_REG_6 | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "DIV", I_DIV },
    { 0xF7, 0x00, F_MODRM_REG_0 | F_REXW_PROMOTE_OP1_32_TO_64 | F_REXW_SIGN_EXTEND_OP2_32_TO_64 | F_MODRM | F_IMM32 | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, c_OP_IMM32, NULL, "TEST", I_TEST },
    { 0xF7, 0x00, F_MODRM_REG_2 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "NOT", I_NOT },
    { 0xF7, 0x00, F_MODRM_REG_3 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, NULL, NULL, "NEG", I_NEG },
    { 0xF7, 0x00, F_MODRM_REG_4 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "MUL", I_MUL },
    { 0xF7, 0x00, F_MODRM_REG_5 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, NULL, NULL, "IMUL", I_IMUL },
    { 0xF7, 0x00, F_MODRM_REG_6 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, NULL, NULL, "DIV", I_DIV },
    { 0xF7, 0x00, F_MODRM_REG_7 | F_REXW_PROMOTE_ALL_32_OPS_TO_64 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "IDIV", I_IDIV },
    { 0xF8, 0x00, 0, NULL, NULL, NULL, "CLC", I_CLC },
    { 0xF9, 0x00, 0, NULL, NULL, NULL, "STC", I_STC },
    { 0xF9, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PSUBW", I_PSUBW },
    { 0xFA, 0x00, 0, NULL, NULL, NULL, "CLI", I_CLI },
    { 0xFA, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PSUBD", I_PSUBD },
    { 0xFB, 0x00, 0, NULL, NULL, NULL, "STI", I_STI },
    { 0xFB, 0x00, F_0F | F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PSUBQ", I_PSUBQ },
    { 0xFC, 0x00, 0, NULL, NULL, NULL, "CLD", I_CLD },
    { 0xFC, 0x00, F_MODRM | F_PREFIX66_IS_PART_OF_OPCODE | F_0F, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PADDB", I_PADDB },
    { 0xFD, 0x00, 0, NULL, NULL, NULL, "STD", I_STD },
    { 0xFE, 0x00, F_MODRM_REG_0 | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "INC", I_INC },
    { 0xFE, 0x00, F_MODRM_REG_1 | F_MODRM, c_OP_MODRM_RM8, NULL, NULL, "DEC", I_DEC },
    { 0xFE, 0x00, F_PREFIX66_IS_PART_OF_OPCODE | F_0F | F_MODRM, c_OP_MODRM_R_XMM, c_OP_MODRM_RM_XMM, NULL, "PADDD", I_PADDD },
    { 0xFF, 0x00, F_MODRM_REG_0 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, NULL, NULL, "INC", I_INC },
    { 0xFF, 0x00, F_MODRM_REG_1 | F_REXW_PROMOTE_OP1_32_TO_64 | F_MODRM | F_PREFIX66_ALLOWED, c_OP_MODRM_RM32, NULL, NULL, "DEC", I_DEC },
    { 0xFF, 0x00, F_MODRM_REG_2 | F_X32_ONLY | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "CALL", I_CALL }, // [?] IDA marks this as "large"
    { 0xFF, 0x00, F_MODRM_REG_2 | F_X64_ONLY | F_MODRM, c_OP_MODRM_RM64, NULL, NULL, "CALL", I_CALL }, // [?] IDA marks this as "large"
    { 0xFF, 0x00, F_MODRM_REG_4 | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "JMP", I_JMP },
    { 0xFF, 0x00, F_MODRM_REG_6 | F_X32_ONLY | F_PREFIX66_ALLOWED | F_MODRM, c_OP_MODRM_RM32, NULL, NULL, "PUSH", I_PUSH },
    { 0xFF, 0x00, F_MODRM_REG_6 | F_X64_ONLY | F_MODRM, c_OP_MODRM_RM64, NULL, NULL, "PUSH", I_PUSH },
